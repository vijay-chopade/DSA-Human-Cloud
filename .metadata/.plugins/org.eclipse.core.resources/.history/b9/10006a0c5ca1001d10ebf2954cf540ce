package com.ServerAPI;

import java.util.ArrayList;
import java.util.Iterator;

public class Runner {

	public static void main(String[] args) {
		Menu listMenu = new Menu(1, "LinkedList");
		listMenu.addMI(new MenuItem(1, "insert()"));
		listMenu.addMI(new MenuItem(2, "insertStart()"));
		listMenu.addMI(new MenuItem(3, "insertAt()"));
		listMenu.addMI(new MenuItem(4, "deleteAt()"));
		listMenu.addMI(new MenuItem(5, "deleteAll()"));
		listMenu.addMI(new MenuItem(6, "show()"));
		listMenu.addMI(new MenuItem(7, "size()"));
		listMenu.addMI(new MenuItem(8, "isEmpty()"));
		listMenu.addMI(new MenuItem(0, "Back to Main Menu"));
		listMenu.display1();

		Menu queMenu = new Menu(2, "Queue");
		queMenu.addMI(new MenuItem(1, "Push"));
		queMenu.addMI(new MenuItem(2, "Peek"));
//		1.enQue()		2.deQue()		3.show()
//		4.size()		5.isEmpty()		0.Back to Main Menu
		queMenu.display1();

		Menu stackMenu = new Menu(2, "Stack");
		stackMenu.addMI(new MenuItem(1, "Push"));
		stackMenu.addMI(new MenuItem(2, "Peek"));
//		1.push()		2.pop()			3.fatch()
//		4.show()		5.size()		6.isEmpty()
//		7.capacity()		8.pick()		0.Back to Main Menu
		stackMenu.display1();

		// Runner.listData();
	}

//	public static void listData() {
//		
//		ArrayList<MenuItem> list = new ArrayList<>();
//		list.add(new MenuItem(1, "pop()", new Menu()));
//		list.add(new MenuItem(2, "push()", new Menu()));
//		list.add(new MenuItem(3, "peek()", new Menu()));
//
//		ArrayList<MenuItem> stack = new ArrayList<>();
//		stack.add(new MenuItem(1, "spop()", new Menu()));
//		stack.add(new MenuItem(2, "spush()", new Menu()));
//		stack.add(new MenuItem(3, "speek()", new Menu()));
//
//		ArrayList<MenuItem> queue = new ArrayList<>();
//		queue.add(new MenuItem(1, "qpop()", new Menu()));
//		queue.add(new MenuItem(2, "qpush()", new Menu()));
//		queue.add(new MenuItem(3, "qpeek()", new Menu()));
//
//		ArrayList<Menu> menulist = new ArrayList<>();
//		menulist.add(new Menu(1, "LinkedList", list));
//		menulist.add(new Menu(2, "Stack", stack));
//		menulist.add(new Menu(3, "Queue", queue));
//
//		Runner.form(menulist);
//		Runner.formi(list);
//		Runner.formi(queue);
//		Runner.formi(stack);
//
//	}

	public static void form(ArrayList<Menu> list) {

		Iterator<Menu> ite = list.iterator();
		while (ite.hasNext()) {
			Menu m = ite.next();
			System.out.println(m.getId() + " " + m.getName());
		}
		System.out.println();
	}

	public static void formi(ArrayList<MenuItem> list) {
		Iterator<MenuItem> ite = list.iterator();
		while (ite.hasNext()) {
			MenuItem m = ite.next();
			System.out.println(m.getId() + " " + m.getName());

		}
		System.out.println();
	}

}

//private static Scanner sc = new Scanner(System.in);

//public static void DataStructure() {
//	ArrayList<Menu> m = new ArrayList<>();
//	m.add(new Menu(1, "LinkedList"));
//	m.add(new Menu(2, "Queue"));
//	m.add(new Menu(3, "Stack"));
//	for (Menu x : m) {
//		System.out.println(x.getIndex() + " " + x.getDs() + " " + x.getMenu());
//	}
//	System.out.print("Enter input: ");
//	opration();
//}
//
//public static void opration() {
//	int op = Runner.sc.nextInt();
//	ArrayList<MenuItem> mi = new ArrayList<>();
//	mi.add(new MenuItem(1, "push()"));
//	mi.add(new MenuItem(2, "pop()"));
//	mi.add(new MenuItem(3, "peek()"));
//	for (MenuItem x : mi) {
//		System.out.println(x.getIndex() + " " + x.getOpration());
//	}
//
//}

//public static void main(String[] args) {
//	Runner.DataStructure();
//}
