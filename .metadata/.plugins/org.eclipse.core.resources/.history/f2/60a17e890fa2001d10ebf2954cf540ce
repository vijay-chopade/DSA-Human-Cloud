package com.ServerAPI;

import java.util.Scanner;

import com.List.LinkedList;
import com.Queue.Queue;
import com.Stack.Stack;

public class ManuController {

	public static void opration() {
		Scanner ss = new Scanner(System.in);
		boolean whileCon3 = true;
		LinkedList ll = new LinkedList();
		Stack sl = new Stack();
		Queue ql = new Queue();
		while (whileCon3) {
			int input = ss.nextInt();
			switch (input) {
			case 1:

				ll.insert(ss.nextInt());
				break;
			case 2:

				ll.insertAtStart(ss.nextInt());
				break;
			case 3:
				System.out.print("Data : ");
				int data = ss.nextInt();
				System.out.print("Index : ");
				int index = ss.nextInt();
				ll.insertAt(index, data);
				break;
			case 4:

				ll.deleteAt(ss.nextInt());
				break;
			case 5:
				ll.deleteAll();
				break;
			case 6:
				ll.show();
				break;
			case 7:
				ll.isEmpty();
				break;
			case 0:
				whileCon3 = false;
				break;
			}
		}
//		ss.close();
	}

	public static void setList() {
		Scanner sc = new Scanner(System.in);
		boolean whileCon1 = true;
		int i = 0;
		while (whileCon1) {
			boolean whileCon2 = true;
			Menu listMenu = new Menu(1, "LinkedList");
			Menu queMenu = new Menu(2, "Queue");
			Menu stackMenu = new Menu(3, "Stack");
			Menu backMenu = new Menu(4, "Exit");
			listMenu.display();
			queMenu.display();
			stackMenu.display();
			backMenu.display();
			System.out.println();
			while (whileCon2) {
				System.out.print("Enter no: ");
				i = sc.nextInt();

				if (i == 1) {
					listMenu.addMI(new MenuItem(1, "insert()"));
					listMenu.addMI(new MenuItem(2, "insertStart()"));
					listMenu.addMI(new MenuItem(3, "insertAt()"));
					listMenu.addMI(new MenuItem(4, "deleteAt()"));
//					listMenu.addMI(new MenuItem(5, "deleteAll()"));
//					listMenu.addMI(new MenuItem(6, "show()"));
//					listMenu.addMI(new MenuItem(7, "size()"));
//					listMenu.addMI(new MenuItem(8, "isEmpty()"));
					listMenu.addMI(new MenuItem(0, "Back to Main Menu"));
					listMenu.display1();
					ManuController.opration();

				} else if (i == 2) {
					queMenu.addMI(new MenuItem(1, "enQue()"));
					queMenu.addMI(new MenuItem(2, "deQue()"));
					queMenu.addMI(new MenuItem(3, "show()"));
					queMenu.addMI(new MenuItem(4, "size()"));
					queMenu.addMI(new MenuItem(5, "isEmpty()"));
					queMenu.addMI(new MenuItem(0, "Back to Main Menu"));
					queMenu.display1();
				} else if (i == 3) {
					stackMenu.addMI(new MenuItem(1, "Push"));
					stackMenu.addMI(new MenuItem(2, "pop()"));
					stackMenu.addMI(new MenuItem(3, "fatch()"));
					stackMenu.addMI(new MenuItem(4, "show()"));
					stackMenu.addMI(new MenuItem(5, "Size()"));
					stackMenu.addMI(new MenuItem(6, "isEmpty()"));
					stackMenu.addMI(new MenuItem(7, "capacity()"));
					stackMenu.addMI(new MenuItem(8, "peek()"));
					stackMenu.addMI(new MenuItem(0, "Back to Main Menu"));
					stackMenu.display1();
				} else if (i == 0) {
					whileCon2 = false;
					break;
				} else if (i == 4) {
					whileCon1 = false;
					break;
				}
			}
		}
		sc.close();
	}
}
