package com.ServerAPI;

import java.util.Scanner;

import com.List.LinkedList;
import com.Queue.Queue;
import com.Stack.Stack;

public class ManuController {

	static Stack sl = new Stack();
	static LinkedList ll = new LinkedList();
	static Queue ql = new Queue();

	public static boolean oprationLL() {
		Scanner s1 = new Scanner(System.in);
		boolean whileCon3 = true;
		while (whileCon3) {
			System.out.print("Enter Method No: ");
			int input = s1.nextInt();
			int data = 0;
			int index = 0;
			switch (input) {
			case 1:
				System.out.print("Enter Data : ");
				ll.insert(s1.nextInt());
				break;
			case 2:
				System.out.print("Enter Data : ");
				ll.insertAtStart(s1.nextInt());
				break;
			case 3:
				System.out.print("Enter Data : ");
				data = s1.nextInt();
				System.out.print("Enter Index : ");
				index = s1.nextInt();
				ll.insertAt(index, data);
				break;
			case 4:
				System.out.print("Enter Index : ");
				index = s1.nextInt();
				ll.deleteAt(index);
				break;
			case 5:
				ll.show();
				break;
			case 0:
				whileCon3 = false;
				break;
			}
			whileCon3 = permition();
		}
//		s1.close();
		if (whileCon3)
			return true;
		else
			return false;
	}

	public static boolean oprationQL() {
		Scanner s2 = new Scanner(System.in);
		boolean whileCon3 = true;
		while (whileCon3) {
			System.out.print("Enter Method No: ");
			int input = s2.nextInt();
			switch (input) {
			case 1:
				System.out.print("Enter Data : ");
				ql.enqueue(s2.nextInt());
				break;
			case 2:
				ql.dequeue();
				break;

			case 0:
				whileCon3 = false;
				break;
			}
			whileCon3 = permition(input);
//			System.out.println();
		}
//		s2.close();
		if (whileCon3)
			return true;
		else
			return false;
	}

	public static boolean oprationSL() {
		Scanner s3 = new Scanner(System.in);
		boolean whileCon3 = true;
		while (whileCon3) {
			System.out.print("Enter Method No: ");
			int input = s3.nextInt();
			switch (input) {
			case 1:
				System.out.print("Enter Data : ");
				sl.push(s3.nextInt());
				break;
			case 2:
				sl.pop();
				break;
			case 3:
				System.out.print("Enter Data : ");
				sl.peek(s3.nextInt());
				break;
			case 4:
				sl.fatch();
				break;
			case 5:
				sl.show();
				break;
			case 0:
				whileCon3 = false;
				break;
			}

			whileCon3 = permition();
//			System.out.println();
		}
//		s3.close();
		if (whileCon3)
			return true;
		else
			return false;
	}

	public static void setList() {
		Scanner s4 = new Scanner(System.in);
		boolean whileCon1 = true;
		int i = 0;
		while (whileCon1) {
			boolean whileCon2 = true;
			Menu listMenu = new Menu(1, "LinkedList");
			Menu queMenu = new Menu(2, "Queue");
			Menu stackMenu = new Menu(3, "Stack");
//			Menu backMenu = new Menu(4, "Exit");
			listMenu.display();
			queMenu.display();
			stackMenu.display();
//			backMenu.display();
			System.out.println();
			while (whileCon2) {
				System.out.print("Enter DSA No: ");
				i = s4.nextInt();

				if (i == 1) {
					listMenu.addMI(new MenuItem(1, "insert()"));
					listMenu.addMI(new MenuItem(2, "insertStart()"));
					listMenu.addMI(new MenuItem(3, "insertAt()"));
					listMenu.addMI(new MenuItem(4, "deleteAt()"));
					listMenu.addMI(new MenuItem(5, "show()"));
					listMenu.addMI(new MenuItem(0, "Back to Main Menu"));
					listMenu.display1();
					whileCon2 = ManuController.oprationLL();

				} else if (i == 2) {
					queMenu.addMI(new MenuItem(1, "enQue()"));
					queMenu.addMI(new MenuItem(2, "deQue()"));
//					queMenu.addMI(new MenuItem(3, "show()"));
					queMenu.addMI(new MenuItem(0, "Back to Main Menu"));
					queMenu.display1();
					whileCon2 = ManuController.oprationQL();
				} else if (i == 3) {
					stackMenu.addMI(new MenuItem(1, "Push"));
					stackMenu.addMI(new MenuItem(2, "pop()"));
					stackMenu.addMI(new MenuItem(3, "peek()"));
					stackMenu.addMI(new MenuItem(4, "fatch()"));
					stackMenu.addMI(new MenuItem(5, "show()"));
					stackMenu.addMI(new MenuItem(0, "Back to Main Menu"));
					stackMenu.display1();
					whileCon2 = ManuController.oprationSL();
				} else if (i == 0) {
					whileCon2 = false;
					break;
				} else if (i == 4) {
					whileCon1 = false;
					break;
				}
			}
		}
		System.err.println("\nEnd >> ");
//		s4.close();
	}

	private static boolean permition(int a) {
		Scanner s5 = new Scanner(System.in);
		System.out.print("Do You want to continue 'y/n' : ");
		String ans = s5.nextLine();
		System.out.println();//
//		s5.close();
		if (a == 0)
			return false;
		else
			return (ans.equalsIgnoreCase("y")) ? true : false;
	}
}
